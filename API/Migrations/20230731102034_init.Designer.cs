// <auto-generated />
using System;
using BigBangTravelPortalAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BigBangTravelPortalAPI.Migrations
{
    [DbContext(typeof(TravelPortalContext))]
    [Migration("20230731102034_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BigBangTravelPortalAPI.Models.Administrator", b =>
                {
                    b.Property<int>("Admin_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Admin_Id"));

                    b.Property<string>("Admin_Password")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Admin_Username")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Admin_Id");

                    b.ToTable("Administrators");
                });

            modelBuilder.Entity("BigBangTravelPortalAPI.Models.Booking", b =>
                {
                    b.Property<int>("Booking_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Booking_Id"));

                    b.Property<string>("Booking_Date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Booking_TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TourPackage_Id")
                        .HasColumnType("int");

                    b.Property<int?>("TravelerTraveller_Id")
                        .HasColumnType("int");

                    b.HasKey("Booking_Id");

                    b.HasIndex("TourPackage_Id");

                    b.HasIndex("TravelerTraveller_Id");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("BigBangTravelPortalAPI.Models.TourPackage", b =>
                {
                    b.Property<int>("TourPackage_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TourPackage_Id"));

                    b.Property<string>("Hotel_Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location_Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location_Speciality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Spots_Nearby")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TourPackage_HotelName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TourPackage_Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TourPackage_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TourPackage_PricePerDay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TravelAgent_Id")
                        .HasColumnType("int");

                    b.HasKey("TourPackage_Id");

                    b.HasIndex("TravelAgent_Id");

                    b.ToTable("TourPackages");
                });

            modelBuilder.Entity("BigBangTravelPortalAPI.Models.TravelAgent", b =>
                {
                    b.Property<int>("TravelAgent_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TravelAgent_Id"));

                    b.Property<int?>("AdministratorAdmin_Id")
                        .HasColumnType("int");

                    b.Property<string>("TravelAgent_IsApproved")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TravelAgent_Password")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TravelAgent_Username")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TravelAgent_Id");

                    b.HasIndex("AdministratorAdmin_Id");

                    b.ToTable("TravelAgents");
                });

            modelBuilder.Entity("BigBangTravelPortalAPI.Models.Traveler", b =>
                {
                    b.Property<int>("Traveller_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Traveller_Id"));

                    b.Property<string>("Traveller_Password")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Traveller_Username")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Traveller_Id");

                    b.ToTable("Travelers");
                });

            modelBuilder.Entity("BigBangTravelPortalAPI.Models.Booking", b =>
                {
                    b.HasOne("BigBangTravelPortalAPI.Models.TourPackage", "TourPackage")
                        .WithMany("Bookings")
                        .HasForeignKey("TourPackage_Id");

                    b.HasOne("BigBangTravelPortalAPI.Models.Traveler", "Traveler")
                        .WithMany("Bookings")
                        .HasForeignKey("TravelerTraveller_Id");

                    b.Navigation("TourPackage");

                    b.Navigation("Traveler");
                });

            modelBuilder.Entity("BigBangTravelPortalAPI.Models.TourPackage", b =>
                {
                    b.HasOne("BigBangTravelPortalAPI.Models.TravelAgent", "TravelAgent")
                        .WithMany("TourPackages")
                        .HasForeignKey("TravelAgent_Id");

                    b.Navigation("TravelAgent");
                });

            modelBuilder.Entity("BigBangTravelPortalAPI.Models.TravelAgent", b =>
                {
                    b.HasOne("BigBangTravelPortalAPI.Models.Administrator", "Administrator")
                        .WithMany("TravelAgents")
                        .HasForeignKey("AdministratorAdmin_Id");

                    b.Navigation("Administrator");
                });

            modelBuilder.Entity("BigBangTravelPortalAPI.Models.Administrator", b =>
                {
                    b.Navigation("TravelAgents");
                });

            modelBuilder.Entity("BigBangTravelPortalAPI.Models.TourPackage", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("BigBangTravelPortalAPI.Models.TravelAgent", b =>
                {
                    b.Navigation("TourPackages");
                });

            modelBuilder.Entity("BigBangTravelPortalAPI.Models.Traveler", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
